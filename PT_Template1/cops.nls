; File with the "to-go"- functionality of cops-agents

; FILE HISTORY:

; 2022-04-10 Initial template, gks, Edited by: Oscar, Ömer, Adam
; 
;
;
;
;---------------------------------------------------

;---- Specific, local variables of cop-agents


cops-own [
  pvision ; cop-vision is set by slider
  cop-speed
  order ; Received order that currently is being carried out. Enumeration = rule-of-law,
  ; arrest-troublemakers,looking-for-terrorists, suppress-riots
  last-hunted
  last-suspect
  my-beliefs ; List to store beliefs about the environment, like number of nearby citizens
]

to setup-cops
create-cops num-cops [
    set label who
    set shape "person police" 
    set size 1
    set color blue
    ;setxy random 10 random 40
    move-to one-of patches with [region = "PoliceStation"]
    set cop-speed 1
    set beliefs [] 
    set intentions []
    set incoming-queue []
    set last-hunted nobody
    set last-suspect nobody
  ]
  
  
end


to cop_behavior
  ;########## Updating the Beliefs, e.g. the agent's information about its environment ##############
  update-beliefs
  ; Kontrollera om det finns behov av förstärkning
  ;if needs-reinforcement? [
 ;   request-reinforcement
;  ]
  ; suspects = citizens nearby?
  let suspect one-of citizens-here with [inPrison? = false] ; need to make sure the citizen is not in jail, otherwise can the cop be trapped besides
  if any? citizens-here with [inPrison? = false] [ask suspect [ set fear (1 + 5 * f) * fear ]]
  let hunted one-of other citizens with [inPrison? = false] in-radius cop-vision
  
  ;---test purpose
  ;set destinationxy one-of patches with [region = "Restaurant"]
  if copSource = "rule-of-law" [
    set order "rule-of-law"
  ] 
  if copSource = "arrest-troublemakers"
[
  set order "arrest-troublemakers"

  ]
  ;set order "rule-of-law"
  ;set order "arrest-troublemakers"

  ;################## REACTIVE BEHAVIOR ####################################
  ; subsumption hierarchy with highest priority in first if-sentence
  ; hiearchy of orders
 
  (ifelse 
    order = "rule-of-law" [rule-of-law suspect hunted]
    order = "arrest-troublemakers" [
      (ifelse 
        suspect != nobody [arrest suspect]    
        hunted != nobody [catch hunted]
        true [patrolAround])]
  ) 
 
end 

; En funktion för att uppdatera polisens tron om sin omgivning
to update-beliefs
  let nearby-citizens count citizens in-radius pvision with [jailsentence = 0]
  let nearby-cops count other cops in-radius pvision
  set my-beliefs (list nearby-citizens nearby-cops)
end
  
to rule-of-law [suspect hunted]

  if random 9 > 0 [set suspect nobody set hunted nobody]
  if hunted = last-hunted [set hunted nobody]
  if suspect = last-suspect [set suspect nobody]
 (ifelse
    suspect != nobody and random 29 = 0 [arrest suspect set last-suspect suspect]
    hunted != nobody [catch hunted set last-hunted hunted]
    true [patrolAround])
end
 
to patrolAround
  let places neighborhood with [region = "empty" or region = "TownSquare"]
  if any? places [move-to one-of places]
end
to arrest [suspect]
  ; move the citizen to prison and mark them as arrested
  if Debug [print (word " cop-agent: " who " puts suspect: " suspect " to prison!")]
  ; Check if there are any terrorists nearby
  ifelse any? citizens-here with [intentions = ["terrorist"]] [
    ; Calculate the number of terrorists within vision range
    let terrorists count citizens in-radius pvision with [intentions = ["terrorist"] and inPrison? = false]
    ; Calculate the number of cops within vision range
    let cops-in-range count other cops in-radius pvision
    ; Check if there are more cops than terrorists
    ifelse cops-in-range >= (terrorists * 2) [
      ; Enough cops to arrest the terrorist
      ask suspect [
        set jailsentence random max-jailterm
        gotoprison
      ]
  ] [
      ; Not enough cops to arrest the terrorist notify other cops for reinforcement
      let help-message create-message "request"
      ;Location of the suspect
      let location (word "Location " [xcor] of suspect "-" [ycor] of suspect)
      ;The message being sent (includes location)
       let content (word "Need reinforcement to arrest a terrorist by " who " Location:" location)
      print (word "Need reinforcement to arrest a terrorist by " who" " location)
     ; print (location)
      ; Add content and location to the help message
      set help-message lput content help-message
     
      ; Broadcast the request for reinforcement to neaby cops
      broadcast-to (other cops in-radius 10) help-message self
    ]
  ] [
    ; No terrorists nearby check if reinforcement is needed for high citizen count
    let citizens-nearby count citizens-here with [inPrison? = false]
    let cops-nearby count other cops in-radius pvision
    if citizens-nearby > 2 * cops-nearby [
      ; Request reinforcement for high citizen count
      let help-message create-message "request"
      ;The message that is being sent
      let content (word "Need reinforcement due to high citizen count by " who)
      print (word "Need reinforcement due to high citizen count by " who)
      ; Add content to the help message
      set help-message lput content help-message
      ; Broadcast the request for reinforcement to all cops
        broadcast-to (other cops in-radius 10) help-message self

    ] 
      ; No terrorists nearby and no high citizen count
      ask suspect [
        set jailsentence random max-jailterm
        gotoprison
      ]
    
  ]
end

to catch [hunted]
  if Debug [print (word " cop-agent: " who " tries to catch: " hunted)]
  face hunted 
  forward cop-speed
  ; only allow police to be in empty regions or in TownSquare
  let pplaces neighborhood with [region = "empty" or region = "TownSquare"]
  if any? pplaces [move-to one-of pplaces]
end