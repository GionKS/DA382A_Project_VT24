; File with the "to-go"- functionality of cops-agents

; FILE HISTORY:

; 2022-04-10 Initial template, gks
; 
;
;
;
;---------------------------------------------------

;---- Specific, local variables of cop-agents


cops-own [
  ;pvision ; cop-vision is set by slider
  cop-speed
  order ; Received order that currently is being carried out. Enumeration = rule-of-law,
  ; arrest-troublemakers,looking-for-terrorists, suppress-riots
  last-hunted
  last-suspect
  police-chief? ; Police chief or not
  colleagues ; List of all the police chiefs
  choose-cops? ; Flag for assigning the 10-20% of the police core to patrol town square
  chosen-cops? ; The ones chosen to patrol Town square
  extra-cops? ; The remaining cops that gets sent to the Town square
  cluster-size ; The demonstrators reported from the cop agents
]







to setup-cops
create-cops num-cops [
    set label who
    set shape "person police" 
    set size 1
    set color blue
    ;setxy random 10 random 40
    move-to one-of patches with [region = "PoliceStation"]
    set cop-speed 1
    set beliefs [] 
    set intentions []
    set incoming-queue []
    set last-hunted nobody
    set last-suspect nobody
    set police-chief? false
    set colleagues []
    set choose-cops? true
  ]
  

  
  ; Choose one police chief
  ask one-of cops [
    set police-chief? true
    set shape "person police-chief"
    
  ]
  ask cops [
    ; Create a list of all the cop-agents (except itself)
    set colleagues other cops with [self != myself]
  ]
  
end


to cop_behavior
  
  
  ;########## Updating the Beliefs, e.g. the agent's information about its environment ##############
  ;
  ; suspects = citizens nearby?
  let suspect one-of citizens-here with [inPrison? = false] ; need to make sure the citizen is not in jail, otherwise can the cop be trapped besides
  if any? citizens-here with [inPrison? = false] [ask suspect [ set fear (1 + 5 * f) * fear ]]
  let hunted one-of other citizens with [inPrison? = false] in-radius cop-vision
  
  ;---test purpose
  ;set destinationxy one-of patches with [region = "Restaurant"]
  if copSource = "rule-of-law" [
    set order "rule-of-law"
  ] 
  if copSource = "arrest-troublemakers"
  [
    set order "arrest-troublemakers"
    
  ]
  ;set order "rule-of-law"
  ;set order "arrest-troublemakers"
  
  if police-chief? [
    
    if choose-cops? [ 
      ; Select 10-20% of cops randomly
      let percent 0.1 + random-float 0.1
      let num-to-choose round (percent * count cops)
      let selected-cops-list sort n-of num-to-choose cops
      
      ; For each selected cop create and send a message
      let msg create-message "patrol"
      set msg add-content "Patrol Town Square" msg 
      foreach selected-cops-list [this-cop ->
        ask this-cop [
          set msg add-receiver who msg  
          set chosen-cops? true  
          set shape "car"
        ]
      ]
      send msg 
      
      ; Make sure this only happens once
      set choose-cops? false
      print (word who " the police-chief has chosen 10-20% of the police core and to send them a request-message ")
    ]
    
    while [not empty? incoming-queue] [
      let cop-report get-message 
      if get-performative cop-report = "report" [
        let data get-content cop-report
        
        if member? "coordinates" data and member? "cluster" data [
          let report-xcor item (position "coordinates" data + 1) data
          let report-ycor item (position "coordinates" data + 2) data
          set cluster-size item (position "cluster" data + 1) data
          
          update-town-square-matrix report-xcor report-ycor cluster-size
          
         
          print (word "Report received from cop at coordinates: " report-xcor " " report-ycor " with " cluster-size " civilians spotted.")
              
          if cluster-size > 5 [
            let ratio 500  ; 1 cop for every 500 demonstrators based on "antalet poliser per 100.000 inv√•nare i Sverige (200,1)."
            let required-cops ceiling (cluster-size / ratio)  ; round up
                                                              ; available cops
            let available-cops count turtles with [breed = cops and not chosen-cops? and not extra-cops?]
            ; Determine the number of extra cops not more than available-cops
            let extra-cops min (list required-cops available-cops)
            
            let msg create-message "stop-demonstration"
            set msg add-content (list report-xcor report-ycor) msg
            ask n-of extra-cops cops with [not chosen-cops?] [
              set msg add-reciver who msg
              set extra-cops? true
            ]
            send msg
          ]
        ]
      ]
    ]
    
        
    ; Determine when to withdraw extra cops only
    if cluster-size < 3 [
            let msg create-message "retreat"
            ask n-of extra-cops cops with [extra-cops?] [
              set msg add-reciver who msg
              set extra-cops? true
            ]
            send msg
  ]
  
  ;################## REACTIVE BEHAVIOR ####################################
  ; subsumption hierarchy with highest priority in first if-sentence
  ; hiearchy of orders
 
   
  (ifelse 
    order = "rule-of-law" [rule-of-law suspect hunted]
    order = "arrest-troublemakers" [
      (ifelse 
        suspect != nobody [arrest suspect]    
        hunted != nobody [catch hunted]
        true [patrolAround])]
  ) 
 
  
end 
  

to rule-of-law [suspect hunted]

  if random 9 > 0 [set suspect nobody set hunted nobody]

  if hunted = last-hunted [set hunted nobody]
  if suspect = last-suspect [set suspect nobody]

 (ifelse
    suspect != nobody and random 29 = 0 [arrest suspect set last-suspect suspect]
    hunted != nobody [catch hunted set last-hunted hunted]
    true [patrolAround])
end
 

to patrolAround
  let places neighborhood with [region = "empty" or region = "TownSquare"]
  if any? places [move-to one-of places]
end

to arrest [suspect]
  ; move the citizen to prison and mark them as arrested
  if Debug [print (word " cop-agent: " who " puts suspect: " suspect " to prison!")]
  ask suspect [
           set jailsentence random max-jailterm
           gotoprison
        ]
end

to catch [hunted]
  if Debug [print (word " cop-agent: " who " tries to catch: " hunted)]
  face hunted 
  forward cop-speed
  ; only allow police to be in empty regions or in TownSquare
  let pplaces neighborhood with [region = "empty" or region = "TownSquare"]
  if any? pplaces [move-to one-of pplaces]
end

