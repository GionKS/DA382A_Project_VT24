; File with the "to-go"- functionality of cops-agents

; FILE HISTORY:

; 2022-04-10 Initial template, gks
; 
;
;
;
;---------------------------------------------------

;---- Specific, local variables of cop-agents


cops-own [
  ;pvision ; cop-vision is set by slider
  cop-speed
  order ; Received order that currently is being carried out. Enumeration = rule-of-law,
  ; arrest-troublemakers,looking-for-terrorists, suppress-riots
  is-helping? ;Wheter the cop-agent is helping or not
]







to setup-cops
  set help-radius 5
create-cops num-cops [
    set label who
    set shape "person police" 
    set size 1
    set color blue
    ;setxy random 10 random 40
    move-to one-of patches with [region = "PoliceStation"]
    set cop-speed 1
    set beliefs [] 
    set intentions []
    set incoming-queue []
    set is-helping? false
  ]
  
  
end


to cop_behavior
  
  
  ;########## Updating the Beliefs, e.g. the agent's information about its environment ##############
  ;
  ; suspects = citizens nearby?
  let suspect one-of citizens-here with [inPrison? = false] ; need to make sure the citizen is not in jail, otherwise can the cop be trapped besides
  if any? citizens-here with [inPrison? = false] [ask suspect [ set fear (1 + 5 * f) * fear ]]
  let hunted one-of other citizens with [inPrison? = false] in-radius cop-vision
  
  ;---test purpose
  ;set destinationxy one-of patches with [region = "Restaurant"]
  if copSource = "rule-of-law" [
    set order "rule-of-law"
  ] 
  if copSource = "arrest-troublemakers"
[
  set order "arrest-troublemakers"

  ]
  ;set order "rule-of-law"
  ;set order "arrest-troublemakers"

    
    

  ;################## REACTIVE BEHAVIOR ####################################
  ; subsumption hierarchy with highest priority in first if-sentence
  ; hiearchy of orders
  
  let msg nobody
  while [not empty? incoming-queue] [
    let current_msg get-message  
    if get-performative current_msg = "help-request" [
      set order "cop-need-help"
      set msg current_msg  
    ]
  ]
  
  
  
  (ifelse 
    order = "cop-need-help" [
      if msg != nobody [
        handle-help msg
      ]
    ]
    order = "rule-of-law" [
      (ifelse
        true [patrolAround])]
    order = "arrest-troublemakers" [
      (ifelse 
        suspect != nobody [arrest suspect]    
        hunted != nobody [catch hunted]
        true [patrolAround])]
  ) 
 
  
end 
  

to handle-help [msg]
  let sender-id get-sender msg
  let sender-cop one-of cops with [who = read-from-string sender-id]

  if sender-cop != nobody and distance sender-cop < help-radius and not is-helping? [
    set is-helping? true
    move-to sender-cop 

    ; Inform other cops
    let help-confirm create-message "help-confirm"
    set help-confirm add-content (word "Helping cop " who " assisting cop " sender-id) help-confirm
    broadcast-to cops help-confirm who 
    
    while [is-helping?] [
      ; continue helping until ??
      set is-helping? false
    ]

    print (word who "Helped cop " sender-cop)   
  ]
end
 

to patrolAround
  let places neighborhood with [region = "empty" or region = "TownSquare"]
  if any? places [move-to one-of places]
end

to arrest [suspect]
  ; move the citizen to prison and mark them as arrested
  if Debug [print (word " cop-agent: " who " puts suspect: " suspect " to prison!")]
  ask suspect [
           set jailsentence random max-jailterm
           gotoprison
        ]
end

to catch [hunted]
  if Debug [print (word " cop-agent: " who " tries to catch: " hunted)]
  face hunted 
  forward cop-speed
  ; only allow police to be in empty regions or in TownSquare
  let pplaces neighborhood with [region = "empty" or region = "TownSquare"]
  if any? pplaces [move-to one-of pplaces]
end

